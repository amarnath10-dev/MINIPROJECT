from picamera2 import Picamera2
import cv2
from ultralytics import YOLO
import pyttsx3
import time

# Initialize TTS engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)

# Load YOLOv8 model
model = YOLO("yolov8n.pt")

# Start Pi Camera
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"format": "RGB888", "size": (640, 480)}))
picam2.start()
time.sleep(2)  # Camera warm-up

print("Smart Assistant is running in real-time. Press Ctrl+C to exit.")

# To track last spoken label and prevent repetition
last_spoken = ""
last_spoken_time = 0
speak_interval = 5  # seconds

try:
    while True:
        frame = picam2.capture_array()
        results = model(frame)
        names = results[0].names
        boxes = results[0].boxes

        if boxes.shape[0] > 0:
            top_box = boxes[0]
            conf_score = float(top_box.conf[0])
            if conf_score >= 0.90:
                cls_id = int(top_box.cls[0])
                label = names[cls_id]
                coords = top_box.xyxy[0].cpu().numpy().astype(int)
                x1, y1, x2, y2 = coords

                # Draw bounding box and label
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f"{label} ({conf_score*100:.1f}%)", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

                current_time = time.time()
                if label != last_spoken or (current_time - last_spoken_time) > speak_interval:
                    print(f"Detected: {label} ({conf_score*100:.2f}%)")
                    engine.say(f"This is a {label}")
                    engine.runAndWait()
                    last_spoken = label
                    last_spoken_time = current_time
            else:
                print(f"Low confidence ({conf_score*100:.2f}%), skipping speech.")
        else:
            print("No object detected.")

        # Show video output with bounding box
        cv2.imshow("Detected Object", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("\nExiting...")

finally:
    picam2.stop()
    cv2.destroyAllWindows()